Considerations regarding this project:

First off: Decide which poll equivalent to use!.
Since we are coding on MacOS I would prefer we go with Kqueue since it is the most efficient on a BSD system.

Second: Info necessary to be able to understand what we do:
1. Crash Course on Containers, explicitly vectors and unordered maps.
2. Crash Course on memory pointer types to make memory management easier(weak, shared, unique pointers)
3. Crash Course on regex library, chrono time library, also maybe multithreading library like <thread>?
4. Basic structure of webservers including:

-> config, fds, connections(accept, close, states(alive, timeout handling etc..)),
   kqueue, sockets(listen), port handling, event handlers, server_blocks, mime_types, file uploads, error handling

-> Request formatting including parsing of: method, http headers, body in ABNF (Augmented Backus-Naur Form: basically request syntax), clientside-GET, clientside-POST, clientside-DELETE

-> Response formatting: status, header, body, serverside-GET, serverside-POST, serverside-DELETE

-> how to set non-blocking and checks for errors as well as requesting info on file read-writes, and file exist checking

-> Macroes like: FD_SET, FD_CLR, FD_ISSET, FD_ZERO

-> Maybe also load balancing because of this requirement: Stress tests your server. It must stay available at all cost!

-> CGI: Common Gateway Interface handling.

Bonus:

-> Cookies + Session Management

-> multiple CGI