
- There should be only one read or one write per client per select() (or equivalent). Ask the group to show you the code from the select() (or equivalent) to the read and write of a client.

- Search for all read/recv/write/send on a socket and check that, if an error is returned, the client is removed.

- Search for all read/recv/write/send and check if the returned value is correctly checked (checking only -1 or 0 values is not enough, both should be checked).

- Writing or reading ANY file descriptor without going through the select() (or equivalent) is strictly FORBIDDEN.

- Setup multiple servers with different ports.
	port 8080/8081

- Setup multiple servers with different hostnames (use something like: curl --resolve example.com:80:127.0.0.1 http://example.com/).

- Setup default error page (try to change the error 404).

- write(): Bad file descriptor

- Limit the client body (use: curl -X POST -H "Content-Type: plain/text" --data "BODY IS HERE write something shorter or longer than body limit"). 100-continue

- Setup a default file to search for if you ask for a directory.

- # root html_pages/uploads
 /home/buildozer/aports/main/gcc/src/build/x86_64-alpine-linux-musl/libstdc++-v3/include/bits/basic_string.h:1341: std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::reference std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::back() [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; reference = char&]: Assertion '!empty()' failed.
Aborted

- ab -n 100 -c 10 http://localhost:8080/ oder siege

- You need to test with files containing errors to see if the error handling works properly. You can use a script containing an infinite loop or an error; you are free to do whatever tests you want within the limits of acceptability that remain at your discretion. The group being evaluated should help you with this.

- In the configuration, try to setup the same port multiple times. It should not work.

- POST CGI

- TEST Cookie
